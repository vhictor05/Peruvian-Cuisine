@startuml

' ==== INTERFACES COMPORTAMENTALES ====
interface IServicio {
  +mostrar_menu(): void
}

interface IReservable {
  +reservar(): void
}

interface IComprable {
  +comprar(): void
}

' ==== SISTEMA PRINCIPAL ====
class SistemaPrincipal {
  +servicios: List<IServicio>
  +elegir_servicio(tipo: str): IServicio
  +mostrar_opciones(): void
}
SistemaPrincipal --> IServicio 





' ==== Disco ==== 
class Evento {
  +id: int
  +nombre: str
  +descripcion: str
  +fecha: datetime
  +precio_entrada: float
  +aforo_maximo: int
}

class ClienteDisco {
  +id: int
  +nombre: str
  +rut: str
  +email: str
  +telefono: str
}

class Entrada {
  +id: int
  +cliente_id: int
  +evento_id: int
  +fecha_compra: datetime
  +reservar(): void
}
Entrada ..|> IReservable 

class Trago {
  +id: int
  +nombre: str
  +descripcion: str
  +precio: float
  +comprar(): void
}
Trago ..|> IComprable

class PedidoBar {
  +id: int
  +cliente_id: int
  +fecha: datetime
  +total: float
}

class Disco {
  +eventos: List<Evento>
  +clientes: List<ClienteDisco>
  +entradas: List<Entrada>
  +tragos: List<Trago>
  +pedidos_bar: List<PedidoBar>
  +mostrar_menu(): void
  +reservar(): void
  +comprar(): void
}
Disco ..|> IServicio

Disco *-- "0..1" Evento

Disco *-- "0..*" Entrada
Disco *-- "0..*" Trago
Disco *-- "0..*" PedidoBar

Entrada "*" --* "1" Evento
Entrada "*" --* "1" ClienteDisco
PedidoBar "0..*" --* "1" ClienteDisco
PedidoBar "1" --o "1..*" Trago


' ==== Patrón Facade para Disco ====
class DiscotecaFacade {
  +registrar_evento(datos: dict): bool
  +listar_eventos(): List<Evento>
  +editar_evento(id: int, datos: dict): bool
  +eliminar_evento(id: int): bool
  +registrar_cliente(datos: dict): bool
  +eliminar_cliente(id: int): bool
  +listar_clientes(): List<ClienteDisco>
  +listar_tragos(): List<Trago>
  +actualizar_stock_trago(id: int, stock: int): bool
  +actualizar_precio_trago(id: int, precio: float): bool
  +cambiar_disponibilidad_trago(id: int, disponible: bool): bool
  +obtener_trago_por_nombre(nombre: str): Trago
  +crear_pedido(cliente_id: int, total: float, detalles: dict): PedidoBar
  +obtener_cliente_por_rut(rut: str): ClienteDisco
}


DiscotecaFacade *-- Evento
DiscotecaFacade *-- ClienteDisco
DiscotecaFacade *-- Entrada
DiscotecaFacade *-- Trago
DiscotecaFacade *-- PedidoBar


' ==== Patrón Builder para Pedidos ====
class PedidoBuilder {
  +set_cliente(cliente_id: int): PedidoBuilder
  +add_detalle(trago_id: int, cantidad: int, precio: float): PedidoBuilder
  +build(): dict
}
PedidoBuilder --> PedidoBar 





' ==== HOTEL (CENTRAL) ====
class HotelFacade {
  +crear_huesped(...)
  +crear_habitacion(...)
  +guardar_reserva(...)
  +eliminar_reserva(...)
  +obtener_huesped_por_rut(...)
  +obtener_todas_reservas()
}
HotelFacade *-- Huesped
HotelFacade *-- Habitacion
HotelFacade *-- Reserva

class HotelBuilder {
  +set_reserva(...)
  +set_estado(...)
  +get_result()
}
HotelBuilder --> Reserva

interface PrecioStrategy {
  +calcular(precio_base): float
}

class PrecioNormalStrategy
class PrecioConDescuentoStrategy
class PrecioConIVAstrategy

PrecioNormalStrategy ..|> PrecioStrategy
PrecioConDescuentoStrategy ..|> PrecioStrategy
PrecioConIVAstrategy ..|> PrecioStrategy

class CalculadoraPrecio {
  -estrategia: PrecioStrategy
  +calcular(precio_base): float
}
CalculadoraPrecio --> PrecioStrategy

class PrecioStrategyFactory {
  +obtener_estrategia(tipo: str): PrecioStrategy
}

class Huesped {
  +id: int
  +nombre: str
  +rut: str
  +email: str
  +telefono: str
}

class Reserva {
  +id: int
  +huesped_id: int
  +fecha_entrada: date
  +fecha_salida: date
  +estado: str
  -estrategia_precio: PrecioStrategy
  +set_estrategia(estrategia: PrecioStrategy): void
  +calcular_precio(): float
}
Reserva --> PrecioStrategy : usa >

class Habitacion {
  +id: int
  +numero: str
  +tipo: str
  +precio: float
  +disponible: bool
}
Habitacion ..|> IReservable

class DetalleReservaHabitacion {
  +reserva_id: int
  +habitacion_id: int
  +notas: str
}

class Hotel {
  +huespedes: List<Huesped>
  +habitaciones: List<Habitacion>
  +reservas: List<Reserva>
  +mostrar_menu(): void
  +reservar(): void
  +comprar(): void
}
Hotel ..|> IServicio
Hotel *-- "1..*" Habitacion
Hotel *-- "0..*" Reserva
Reserva "*" --> "1" Huesped
Reserva "*" --* "*" DetalleReservaHabitacion
Habitacion "*" --* "*" DetalleReservaHabitacion



' ==== RESTAURANTE ====
class Cliente {
  +id: int
  +nombre: str
  +email: str
}

class Menu {
  +id: int
  +nombre: str
  +descripcion: str
  +precio: float
  +comprar(): void
}
Menu ..|> IComprable

class Pedido {
  +id: int
  +cliente_rut: str
  +descripcion: str
  +total: float
  +fecha: datetime
}

class Mesa {
  +id: int
  +numero: int
  +capacidad: int
  +disponible: bool
}

Mesa ..|> IReservable

class ReservaRestaurante {
  +id: int
  +cliente_id: int
  +fecha: datetime
  +cantidad_personas: int
}

class DetalleReservaMesa {
  +reserva_id: int
  +mesa_id: int
  +comentario: str
}

class Restaurante {
  +clientes: List<Cliente>
  +Menu: List<Menu>
  +pedidos: List<Pedido>
  +reservas: List<ReservaRestaurante>
  +mesas: List<Mesa>
  +mostrar_menu(): void
  +reservar(): void
  +comprar(): void
}
Restaurante ..|> IServicio

Restaurante *-- "0..*" Pedido
Restaurante *-- "1..*" Menu
Restaurante *-- "0..*" ReservaRestaurante
Restaurante *-- "1..*" Mesa

Pedido "1" --* "1" Cliente
Pedido "1" --* "1..*" Menu
ReservaRestaurante "*" --* "1" Cliente
ReservaRestaurante "*" --* "*" DetalleReservaMesa
Mesa "*" --* "*" DetalleReservaMesa






' ==== Reportes completo y conectado ====
class ReporteFacade {
  +crear_reporte(datos): (bool, str)
  +actualizar_estados(ids, estado): (bool, str)
  +eliminar_reporte(ids): (bool, str)
  +obtener_reportes_filtrados(filtros): list
  +get_opciones_filtro(): dict
  +mostrar_menu(): void
}
ReporteFacade ..|> IServicio
ReporteFacade *-- ReporteService

class ReporteService {
  +crear_reporte(datos): (bool, str)
  +actualizar_estados(ids, estado): (bool, str)
  +eliminar_reporte(ids): (bool, str)
  +obtener_reportes(filtros): list
}
ReporteService *-- IReporteRepository
ReporteService --> Reporte 

interface IReporteRepository {
  +crear(reporte): int
  +actualizar_estado(id, estado): bool
  +obtener_por_filtros(filtros): list
  +eliminar(id): bool
}
IReporteRepository --> Reporte



class Reporte {
  +id: int
  +titulo: str
  +modulo: str
  +urgencia: str
  +descripcion: str
  +estado: str
  +reportado_por: str
  +fecha_reporte: datetime
  +builder(): ReporteBuilder
}

class ReporteBuilder {
  +con_titulo(titulo): ReporteBuilder
  +en_modulo(modulo): ReporteBuilder
  +con_urgencia(urgencia): ReporteBuilder
  +con_descripcion(desc): ReporteBuilder
  +reportado_por(usuario): ReporteBuilder
  +con_estado(estado): ReporteBuilder
  +build(): Reporte
}
ReporteBuilder --> Reporte 

class ReporteService {
  +crear_reporte(datos): (bool, str)
  +actualizar_estados(ids, estado): (bool, str)
  +eliminar_reporte(ids): (bool, str)
}

abstract class OperacionReporte {
  +ejecutar(): (bool, str)
  #validar()
  #operacion_principal()
  #procesar_resultado()
}

class CrearReporteOperacion
class ActualizarEstadoOperacion
class EliminarReporteOperacion

ReporteService ..> OperacionReporte 
OperacionReporte <|-- CrearReporteOperacion
OperacionReporte <|-- ActualizarEstadoOperacion
OperacionReporte <|-- EliminarReporteOperacion


@enduml
